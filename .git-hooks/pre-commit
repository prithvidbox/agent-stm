#!/bin/bash

# ================================
# PRE-COMMIT SECURITY HOOK
# ================================
# This script runs before each commit to check for security issues

echo "üîç Running security checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Flag to track if any security issues are found
SECURITY_ISSUES=0

# ================================
# CHECK 1: Environment Files
# ================================
echo "üìã Checking for environment files..."

ENV_FILES=$(git diff --cached --name-only | grep -E "\.env$|\.env\.|\.env_")
if [ ! -z "$ENV_FILES" ]; then
    echo -e "${RED}‚ùå ERROR: Environment files detected in commit:${NC}"
    echo "$ENV_FILES"
    echo -e "${YELLOW}üí° These files contain sensitive data and should not be committed.${NC}"
    SECURITY_ISSUES=1
fi

# ================================
# CHECK 2: API Keys and Secrets
# ================================
echo "üîë Scanning for API keys and secrets..."

# Check for common secret patterns
SECRET_PATTERNS=(
    "sk-[a-zA-Z0-9]{48}"  # OpenAI API keys
    "OPENAI_API_KEY.*=.*sk-"
    "password.*=.*[^example]"
    "secret.*=.*[^example]"
    "token.*=.*[^example]"
    "api_key.*=.*[^example]"
)

for pattern in "${SECRET_PATTERNS[@]}"; do
    MATCHES=$(git diff --cached | grep -i "$pattern" | grep -v "example" | grep -v "your-.*-here")
    if [ ! -z "$MATCHES" ]; then
        echo -e "${RED}‚ùå ERROR: Potential secret detected:${NC}"
        echo "$MATCHES"
        SECURITY_ISSUES=1
    fi
done

# ================================
# CHECK 3: Database Files
# ================================
echo "üóÑÔ∏è Checking for database files..."

DB_FILES=$(git diff --cached --name-only | grep -E "\.db$|\.sqlite$|\.sqlite3$")
if [ ! -z "$DB_FILES" ]; then
    echo -e "${RED}‚ùå ERROR: Database files detected in commit:${NC}"
    echo "$DB_FILES"
    echo -e "${YELLOW}üí° Database files may contain sensitive data and should not be committed.${NC}"
    SECURITY_ISSUES=1
fi

# ================================
# CHECK 4: Log Files
# ================================
echo "üìù Checking for log files..."

LOG_FILES=$(git diff --cached --name-only | grep -E "\.log$|logs/")
if [ ! -z "$LOG_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è WARNING: Log files detected in commit:${NC}"
    echo "$LOG_FILES"
    echo -e "${YELLOW}üí° Please ensure log files don't contain sensitive information.${NC}"
fi

# ================================
# CHECK 5: Large Files
# ================================
echo "üì¶ Checking for large files..."

LARGE_FILES=$(git diff --cached --name-only | xargs -I {} sh -c 'if [ -f "{}" ] && [ $(stat -f%z "{}" 2>/dev/null || stat -c%s "{}" 2>/dev/null || echo 0) -gt 10485760 ]; then echo "{}"; fi')
if [ ! -z "$LARGE_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è WARNING: Large files detected (>10MB):${NC}"
    echo "$LARGE_FILES"
    echo -e "${YELLOW}üí° Consider using Git LFS for large files.${NC}"
fi

# ================================
# CHECK 6: Uploaded Files
# ================================
echo "üìÅ Checking for uploaded files..."

UPLOAD_FILES=$(git diff --cached --name-only | grep -E "uploads/|\.pdf$|\.doc$|\.docx$")
if [ ! -z "$UPLOAD_FILES" ]; then
    echo -e "${RED}‚ùå ERROR: Uploaded files detected in commit:${NC}"
    echo "$UPLOAD_FILES"
    echo -e "${YELLOW}üí° User uploaded files should not be committed to version control.${NC}"
    SECURITY_ISSUES=1
fi

# ================================
# CHECK 7: Hardcoded IPs and URLs
# ================================
echo "üåê Checking for hardcoded IPs and URLs..."

IP_PATTERNS=$(git diff --cached | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | grep -v "127.0.0.1\|0.0.0.0\|localhost")
if [ ! -z "$IP_PATTERNS" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è WARNING: Hardcoded IP addresses detected:${NC}"
    echo "$IP_PATTERNS"
    echo -e "${YELLOW}üí° Consider using environment variables for IP addresses.${NC}"
fi

# ================================
# FINAL RESULT
# ================================
echo ""
if [ $SECURITY_ISSUES -eq 0 ]; then
    echo -e "${GREEN}‚úÖ All security checks passed!${NC}"
    echo -e "${GREEN}üöÄ Commit is safe to proceed.${NC}"
    exit 0
else
    echo -e "${RED}‚ùå Security issues detected!${NC}"
    echo -e "${RED}üõë Commit blocked for security reasons.${NC}"
    echo ""
    echo -e "${YELLOW}üìã To fix these issues:${NC}"
    echo "1. Remove sensitive files from staging: git reset HEAD <file>"
    echo "2. Add files to .gitignore if they should never be committed"
    echo "3. Use environment variables for secrets"
    echo "4. Review the SECURITY.md file for guidelines"
    echo ""
    echo -e "${YELLOW}üîß To bypass this check (NOT RECOMMENDED):${NC}"
    echo "git commit --no-verify"
    exit 1
fi
