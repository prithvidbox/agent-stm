#!/bin/bash

# ================================
# GIT SETUP SCRIPT - SECURE INITIALIZATION
# ================================
# This script safely initializes Git with security measures

echo "üîí Setting up Git repository with security measures..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ================================
# 1. CRITICAL SECURITY CHECK
# ================================
echo -e "${RED}üö® CRITICAL SECURITY CHECK${NC}"
echo "Before initializing Git, we need to ensure no sensitive data will be committed."
echo ""

# Check for exposed API keys (excluding this script itself)
echo -e "${BLUE}üîç Scanning for exposed API keys...${NC}"
EXPOSED_KEYS=$(grep -r "sk-proj-" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.example" --exclude="*.md" --exclude="git-setup.sh" 2>/dev/null)

if [ ! -z "$EXPOSED_KEYS" ]; then
    echo -e "${RED}‚ùå CRITICAL: Exposed API keys found!${NC}"
    echo "$EXPOSED_KEYS"
    echo ""
    echo -e "${RED}üõë STOPPING: Cannot proceed with Git setup until API keys are secured.${NC}"
    echo ""
    echo -e "${YELLOW}üìã To fix this:${NC}"
    echo "1. Move all API keys to environment variables"
    echo "2. Ensure .env files are in .gitignore"
    echo "3. Use .env.example for templates"
    echo "4. Run this script again"
    exit 1
else
    echo -e "${GREEN}‚úÖ No exposed API keys found${NC}"
fi

# ================================
# 2. INITIALIZE GIT REPOSITORY
# ================================
if [ ! -d ".git" ]; then
    echo -e "${BLUE}üìÅ Initializing Git repository...${NC}"
    git init
    echo -e "${GREEN}‚úÖ Git repository initialized${NC}"
else
    echo -e "${GREEN}‚úÖ Git repository already exists${NC}"
fi

# ================================
# 3. SETUP SECURITY HOOKS
# ================================
echo -e "${BLUE}ü™ù Installing security hooks...${NC}"

# Copy pre-commit hook
if [ -f ".git-hooks/pre-commit" ]; then
    cp .git-hooks/pre-commit .git/hooks/pre-commit
    chmod +x .git/hooks/pre-commit
    echo -e "${GREEN}‚úÖ Pre-commit security hook installed${NC}"
else
    echo -e "${RED}‚ùå Pre-commit hook not found${NC}"
fi

# ================================
# 4. VERIFY GITIGNORE
# ================================
echo -e "${BLUE}üìã Verifying .gitignore...${NC}"

if [ -f ".gitignore" ]; then
    # Check if critical patterns are in .gitignore
    CRITICAL_PATTERNS=(".env" "*.db" "node_modules" "*.log")
    MISSING_PATTERNS=()
    
    for pattern in "${CRITICAL_PATTERNS[@]}"; do
        if ! grep -q "$pattern" .gitignore; then
            MISSING_PATTERNS+=("$pattern")
        fi
    done
    
    if [ ${#MISSING_PATTERNS[@]} -eq 0 ]; then
        echo -e "${GREEN}‚úÖ .gitignore contains all critical patterns${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Missing patterns in .gitignore:${NC}"
        printf '%s\n' "${MISSING_PATTERNS[@]}"
    fi
else
    echo -e "${RED}‚ùå .gitignore file not found${NC}"
    exit 1
fi

# ================================
# 5. STAGE SAFE FILES ONLY
# ================================
echo -e "${BLUE}üì¶ Staging safe files for initial commit...${NC}"

# Add safe files explicitly
SAFE_FILES=(
    ".gitignore"
    "README.md"
    "SECURITY.md"
    "MEMORY_MANAGEMENT_ARCHITECTURE.md"
    "GIT_SECURITY_SETUP.md"
    "package.json"
    "backend/package.json"
    "backend/.env.example"
    "frontend/"
    "docs/"
    "mcp-servers/"
    "backend/src/"
    "backend/server.js"
    "start.sh"
    "setup-security.sh"
    "git-setup.sh"
    ".git-hooks/"
)

for file in "${SAFE_FILES[@]}"; do
    if [ -e "$file" ]; then
        git add "$file"
        echo -e "${GREEN}‚úÖ Added: $file${NC}"
    fi
done

# ================================
# 6. FINAL SECURITY CHECK
# ================================
echo -e "${BLUE}üîç Final security check on staged files...${NC}"

# Check staged files for secrets
STAGED_SECRETS=$(git diff --cached | grep -i "sk-proj\|api_key.*=.*[^example]" | grep -v "your-.*-here")
if [ ! -z "$STAGED_SECRETS" ]; then
    echo -e "${RED}‚ùå CRITICAL: Secrets found in staged files!${NC}"
    echo "$STAGED_SECRETS"
    echo -e "${RED}üõë Aborting commit${NC}"
    git reset
    exit 1
fi

# ================================
# 7. CREATE INITIAL COMMIT
# ================================
echo -e "${BLUE}üìù Creating initial commit...${NC}"

git commit -m "Initial commit: Agent STM - Semantic Memory Chatbot Playground

‚úÖ Features:
- Advanced semantic memory with vector embeddings
- Session isolation and context management
- MCP (Model Context Protocol) integration
- Comprehensive security measures
- Memory management architecture

üîí Security:
- Comprehensive .gitignore for sensitive files
- Pre-commit hooks for secret detection
- Environment variable templates
- Security documentation and guidelines

üß† Memory System:
- Short-term and long-term memory layers
- Semantic similarity search with OpenAI embeddings
- Entity relationship tracking
- Context fusion (temporal + semantic)
- Automatic memory promotion and cleanup

üîß Technical Stack:
- Node.js backend with Express
- SQLite database with vector storage
- OpenAI GPT-4 Turbo integration
- WebSocket real-time communication
- Comprehensive testing framework

üîí No sensitive data included in this commit"

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Initial commit created successfully${NC}"
else
    echo -e "${RED}‚ùå Commit failed${NC}"
    exit 1
fi

# ================================
# 8. SETUP REMOTE (OPTIONAL)
# ================================
echo ""
echo -e "${YELLOW}üì° Remote Repository Setup${NC}"
echo "To push to a remote repository:"
echo ""
echo "1. Create a new repository on GitHub/GitLab"
echo "2. Add the remote:"
echo "   git remote add origin <your-repo-url>"
echo "3. Push the initial commit:"
echo "   git push -u origin main"
echo ""

# ================================
# 9. FINAL INSTRUCTIONS
# ================================
echo -e "${GREEN}üéâ Git repository setup complete!${NC}"
echo ""
echo -e "${BLUE}üìã What was done:${NC}"
echo "‚úÖ Git repository initialized"
echo "‚úÖ Security hooks installed"
echo "‚úÖ Safe files committed"
echo "‚úÖ Sensitive files protected"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è IMPORTANT REMINDERS:${NC}"
echo "‚Ä¢ Never commit .env files"
echo "‚Ä¢ Always run security checks before pushing"
echo "‚Ä¢ Keep API keys in environment variables"
echo "‚Ä¢ Review SECURITY.md for guidelines"
echo ""
echo -e "${GREEN}üîí Your repository is secure and ready for collaboration!${NC}"
